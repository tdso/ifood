quarkus.http.port=8081
#
#quarkus.datasource.db-kind=postgresql
#quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5433/postgres
#quarkus.datasource.password=marketplace
#quarkus.datasource.username=marketplace
#quarkus.hibernate-orm.database.generation=drop-and-create
#quarkus.hibernate-orm.dialect=org.hibernate.dialect.PostgreSQL10Dialect
#
# configuracao fly - biblioteca reativas nao tem suporte a ORM
quarkus.datasource.db-kind=postgresql
quarkus.datasource.password=marketplace
quarkus.datasource.username=marketplace
# Configuração das duas URLs
quarkus.datasource.reactive.url=postgresql://localhost:5433/postgres
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5433/postgres
#
quarkus.flyway.locations=db/migration
quarkus.flyway.clean-at-start=true
quarkus.flyway.migrate-at-start=true
#
##
## mp.messaging.[outgoing/incoming].{channel-name}.property=value
#amqp-username=admin
#amqp-password=admin
#mp.messaging.incoming.restaurantes.connector=smallrye-amqp
##mp.messaging.outgoing.restaurantes.address=novonome
quarkus.jaeger.service-name=ifood-cadastro
quarkus.jaeger.sampler-type=const
quarkus.jaeger.sampler-param=1
quarkus.jaeger.endpoint=http://localhost:14268/api/traces
#
amqp-port=5672
amqp-username=admin
amqp-password=admin
mp.messaging.incoming.restaurantes.connector=smallrye-amqp
#
#mp.messaging.outgoing.pedidos.connector=smallrye-kafka
#mp.messaging.outgoing.pedidos.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
# Configuring the incoming channel (reading from AMQP)
#mp.messaging.incoming.movies-in.connector=smallrye-amqp
#mp.messaging.incoming.movies-in.address=movies
#
# Configuring the outgoing channel (writing to AMQP)
#mp.messaging.outgoing.movies-out.connector=smallrye-amqp
#mp.messaging.outgoing.movies-out.address=movies
